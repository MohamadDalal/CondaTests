import pickle
import pandas
from ClassCluster2 import *
from time import perf_counter
import seaborn as sns
import matplotlib as plt

# This function is used to create pandas dataframes of the lists of lists generated by the RNG objects
# Cols is the column names list that is found in RNG1 and RNG2 for example
def makeDF(List, Cols=None):
    DF = []
    try:
        DF = pandas.DataFrame(List,columns=Cols)
    except Exception as e:
        print(f'\tHandled Error:{e}')
        New = np.transpose(List)
        DF = pandas.DataFrame(New, columns=Cols)
    finally:
        #print(DF)
        return DF

# Function used to run multiple sampling rounds
def multiRound(Object:ClusterSampler, Iterations:int, SampleSize:int, SubSetSize:int):
    for i in range(Iterations):
        Object.run(SampleSize, SubSetSize)

#Run to create populations and take samples from it
def test(epsilon = 0.01, SampleSize = 1, SubSetSize = 10):
    StartTime = perf_counter()
    Pop = ClusterPopulations(1000000)
    PopTime = perf_counter()
    print(f'Population created in {PopTime - StartTime}\n'
          f'Time since start {PopTime - StartTime}')
    Sampler = ClusterSampler(Pop)
    Sampler.runUntilConverge(epsilon, SampleSize, SubSetSize)
    SampleTime = perf_counter()
    print(f'Sample done in {SampleTime - PopTime}\n'
          f'Time since start {SampleTime - StartTime}')
    print(f'Finish time {SampleTime - StartTime}')
    return [Pop, Sampler]


# Function used to plot line plots for each list of correlations alone
# Arguments (Dataframe of correlation data to be used, Column names of data to be used,
#           Population object for getting true correlation data, save path, bool specifying if to save or not)
# Dataframe is usually made using makeDF(Correlations lists, Data columns)
# Data Columns are in population object
def plotAllLine(DF, Columns, PopObj:ClusterPopulations, SavePath = "", Save = False):
    AxesList = []
    for i in range(1,len(Columns)):
        ax = sns.lineplot(data=DF, x=DF.index, y=Columns[i])
        RealCorr = PopObj.Corr[i]
        Correlation = DF.iloc[-1, i]
        ax.text(0.70, 1.03, f"Approx Corr: {Correlation:.3f}", transform=ax.transAxes)
        ax.text(0, 1.03, f"Real Corr: {RealCorr:.3f}", transform=ax.transAxes)
        ax.axhline(RealCorr, 0, 1, color="r")
        AxesList.append(ax)
        if Save and (len(SavePath) > 0):
            print(f'Saving figure {i}')
            plt.pyplot.savefig(f'{SavePath}{i}.png')
        plt.pyplot.show()
    return AxesList

# Function used to plot scatter plots for all combinations of random variables
# Arguments (Dataframe of data to be used, Column names of data to be used,
#           Cluster sampler for getting approx correlation data, save path, bool specifying if to save or not)
# Dataframe is usually made using makeDF(Data lists, Data columns)
# Data Columns are in population object
def plotAllScatter(DF,Columns, Obj:ClusterSampler = None, SavePath = "", Save = False):
    AxesList = []
    for i in range(1,len(Columns)):
        ax = sns.scatterplot(data=DF, x=Columns[0], y=Columns[i])
        if not type(Obj) == type(None):
            Correlation = Obj.Corrs[i][-1]
            ax.text(0, 1.03, f"Correlation: {Correlation:.3f}", transform=ax.transAxes)
        AxesList.append(ax)
        if Save and (len(SavePath) > 0):
            plt.pyplot.savefig(f'{SavePath}{i}.png')
        plt.pyplot.show()
    return AxesList

# Function used to plot scatter plots for all combinations of random variables
# Arguments same as plotAllScatter()
def plotAllReg(DataDF,Columns, Obj:ClusterSampler = None, SavePath = "", Save = False):
    AxesList = []
    for i in range(1,len(Columns)):
        ax = sns.regplot(data=DataDF, x=Columns[0], y=Columns[i], ci=None, line_kws={"color":"k"})
        if not type(Obj) == type(None):
            Correlation = Obj.Corrs[i][-1]
            ax.text(0, 1.03, f"Correlation: {Correlation:.3f}", transform=ax.transAxes)
        AxesList.append(ax)
        if Save and (len(SavePath) > 0):
            plt.pyplot.savefig(f'{SavePath}{i}')
        plt.pyplot.show()
    return AxesList

# Function used to plot clustered nodes in their positions
# Arguments(Cluster sampler object, Round to take data from, Save path, Bool specifying if to save or not)
def plotTopology(Obj:ClusterSampler, Round = -1, SavePath = "", Save = False):
    PointsX = [Obj.ObjPop.Pos[i][0] for i in range(len(Obj.ObjPop.Pos))]
    PointsY = [Obj.ObjPop.Pos[i][1] for i in range(len(Obj.ObjPop.Pos))]
    _,_,_,_,_,Labels = Obj.ClusterAll(Round)
    Dict = {"PosX": PointsX, "PosY": PointsY, "Cluster": Labels}
    DF = pandas.DataFrame(data=Dict)

    ax = sns.scatterplot(data=DF, x="PosX", y="PosY", hue="Cluster", palette={1:"r", 2:"y", 3:"g", 4:"m", 5:"b"})
    if Round<0:
        R = len(Obj.Corrs[0]) + Round
    else:
        R = Round
    ax.text(0, 1.03, f"Round {(R)}", transform=ax.transAxes)
    if Save and (len(SavePath) > 0):
        plt.pyplot.savefig(SavePath + ".png")
    plt.pyplot.show()
    return ax, DF

# Write pickle object
def PickleWrite(Obj, Path):
    with open(Path, "wb") as file:
        pickle.dump(Obj, file)

# Read pickled object
def PickleRead(Path):
    with open(Path, "rb") as file:
        result = pickle.load(file)
    return result
