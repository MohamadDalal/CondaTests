import numpy as np
from scipy import stats
import pickle
import pandas
from DataPoolSamples import *
import seaborn as sns
import matplotlib as plt

# This function is used to create pandas dataframes of the lists of lists generated by the RNG objects
# Cols is the column names list that is found in RNG1 and RNG2 for example
def makeDF(List, Cols=None):
    DF = []
    try:
        DF = pandas.DataFrame(List,columns=Cols)
    except Exception as e:
        #print(e)
        New = np.transpose(List)
        DF = pandas.DataFrame(New, columns=Cols)
    finally:
        #print(DF)
        return DF

# This function is used to run multiple rounds at once instead of having to do that manually
# Iterations is number of rounds to run, and size is the samples created per round
def multiRound(Object:DPS,Iterations:int, SampleSize:int, PopSize:int, Sorted=False, Compare=False):
    if Compare:
        for i in range(Iterations):
            Object.runCompareOrder(SampleSize, PopSize)
    else:
        for i in range(Iterations):
            Object.run(SampleSize, PopSize, Sorted)

"""
# Function used to run the test run that was recorded
def testRun():
    Obj1 = RNG1()
    Obj2 = RNG2()
    multiRound(Obj1, 1000, 100)
    multiRound(Obj2, 1000, 100)
    DataDF1 = makeDF(Obj1.Data, Obj1.DataCols)
    DataDF2 = makeDF(Obj2.Data, Obj2.DataCols)
    CorrDF1 = makeDF(Obj1.Correlations, Obj1.CorrCols)
    CorrDF2 = makeDF(Obj2.Correlations, Obj2.CorrCols)
    return DataDF1, DataDF2, CorrDF1, CorrDF2
"""

# Function used to plot line plots for each list of correlations alone
def plotAllLine(DF, Columns, RealCorr):
    plt.rc("font", size=16)
    AxesList = []
    for i in range(len(Columns)):
        ax = sns.lineplot(data=DF, x=DF.index, y=Columns[i])
        ax.axhline(RealCorr, color="crimson")                   # Not generalized piece of code
        AxesList.append(ax)
        plt.pyplot.show()
    return AxesList

# Function used to plot scatter plots for all combinations of random variables
def plotAllScatter(DF,Columns):
    plt.rc("font", size=12)
    AxesList = []
    for i in range(len(Columns)):
        for j in range(i+1,len(Columns)):
            ax = sns.scatterplot(data=DF, x=Columns[i], y=Columns[j])
            AxesList.append(ax)
            plt.pyplot.show()
    return AxesList

def plotAllReg(DataDF,Columns, CorrDF, RealCorr):
    plt.rc("font", size=12)
    AxesList = []
    for i in range(len(Columns)):
        for j in range(i + 1, len(Columns)):
            ax = sns.regplot(data=DataDF, x=Columns[i], y=Columns[j], ci=None, line_kws={"color":"k"})
            Correlation = CorrDF[Columns[i]+Columns[j]].iloc[-1]
            ax.text(0.70, 1.03, f"Approx Corr: {Correlation:.3f}", transform=ax.transAxes)
            ax.text(0.70, 1.03, f"Real Corr: {RealCorr:.3f}", transform=ax.transAxes)
            AxesList.append(ax)
            plt.pyplot.show()
    return AxesList

# Does what plotAllLine does, but it combines all the plots in one figure
def subplotAllLine(DF, Columns):
    plt.rc("font", size=5)
    Num = len(Columns)
    Cols = int(np.ceil(np.math.sqrt(Num)))
    Rows = int(np.ceil(Num/Cols))
    print(f'Num={Num}\tRows={Rows}\tCols={Cols}')
    Fig, ax = plt.pyplot.subplots(Rows,Cols)
    Index = 0
    for i in range(Num):
        print(f'Current Row={Index//Cols}\tCurrent Collumn={Index%Cols}')
        sns.lineplot(data=DF, x=DF.index, y=Columns[i], ax=ax[Index//Cols][Index%Cols])
        Index += 1
    Fig.tight_layout()
    Fig.show()
    return Fig, ax

# Does what plotAllScatter does, but it combines all the plots in one figure
def subplotAllScatter(DF, Columns):
    plt.rc("font", size=5)
    L   = len(Columns)
    Num = (L*(L-1)/2)
    Cols = int(np.ceil(np.math.sqrt(Num)))
    Rows = int(np.ceil(Num/Cols))
    print(f'Num={Num}\tRows={Rows}\tCols={Cols}')
    Fig, ax = plt.pyplot.subplots(Rows,Cols)
    Index = 0
    for i in range(len(Columns)):
        for j in range(i+1,len(Columns)):
            print(f'Current Row={Index//Cols}\tCurrent Collumn={Index%Cols}')
            sns.scatterplot(data=DF, x=Columns[i], y=Columns[j], ax=ax[Index//Cols][Index%Cols])
            Index += 1
    Fig.tight_layout()
    Fig.show()
    return Fig, ax

if __name__ == "__main__":
    Obj = DPS()
    multiRound(Obj, 1000, 20, 100)
    CorrDF1 = makeDF(Obj.Correlations, Obj.CorrCols)
    DataDF1 = makeDF(Obj.Data, Obj.DataCols)
    Obj.Clean()
    Obj.runUntilConverge(0.00001,20,100)
    CorrDF2 = makeDF(Obj.Correlations, Obj.CorrCols)
    DataDF2 = makeDF(Obj.Data, Obj.DataCols)

def PickleWriteTest(Obj, Path):
    with open(Path, "wb") as file:
        pickle.dump(Obj, file)

def PickleReadTest(Path):
    with open(Path, "rb") as file:
        result = pickle.load(file)
    return result


